Было проведено четыре эксперимента: вычисления производились в float'ах и в double'ах с оптимизациями и без. 
При использовании для хранения коэффициентов и всех промежуточных значений переменных типа double результаты не зависели от того, использовались ли вычислительные оптимизации.
Значение отклонения правой части уравнения, полученное при использовании вычислительных оптимизаций и переменных типа float, отличалось от полученного при использовании переменных типа double, начиная с 18-го знака после запятой, т.е. с 8-й значащей цифры.
Значение отклонения правой части уравнения при использовании переменных типа float без использования вычислительных оптимизаций не было получено вообще, так как программа уходит в бесконечный цикл.

Таким образом, можно заключить, что эксперимент с использованием переменных типа float и без использования оптимизаций вычисления некорректен, так как ответ очевидно есть, однако с помощью данного эксперимента его получить нельзя. 
Эксперимент с использованием переменных типа float и оптимизаций в целом корректен, так как относительная погрешность полученного результата по сравнению с правильным (аккуратно посчитанным на калькуляторе) не превосходит 10^-7.
Эксперимент с использованием переменных типа double (поскольку результат не зависит от того, применялись ли вычислительные оптимизации, буду считать эти два эксперимента одним) корректен, так как относительная погрешность полученного результата по сравнению с правильным не превосходит 10^-16.

Выводы:
1) Сложение/вычитание вещественных чисел разных порядков (таких как 2.0000 и 10^-4) плохо сказывается на точности вычислений
2) Большое количество арифметических операций с вещественными числами плохо сказывается на точности вычислений
3) Использование переменных типа float плохо сказывается на точности вычислений => всегда, когда есть возможность использовать тип double, лучше использовать тип double